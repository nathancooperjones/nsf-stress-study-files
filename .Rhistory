SC.RB = StressCondition - RestingBaseline,
SC.WB = StressCondition - BaselineWriting,
DT.RB = DualTask - RestingBaseline,
DT.WB = DualTask - BaselineWriting,
DT.SC = DualTask - StressCondition,
P.RB = Presentation - RestingBaseline,
P.WB = Presentation - BaselineWriting,
P.SC = Presentation - StressCondition,
P.DT = Presentation - DualTask) %>%
mutate(second =
ifelse(
(Measurement == "PP"), "ln( PP )", ifelse(
(Measurement == "D.EDA" || Measurement == "N.EDA"), "ln( EDA )", ""
)))
comparison_levels <- c("P.RB", "P.WB", "P.SC", "P.DT")
dt_lst <- list()
i <- 1
for (comp in comparison_levels) {
col_vec <- c("PP", "HR", "BR", "D.EDA", "D.HR")
sign_vec <- NULL
for (col in col_vec) {
do_we_have_anything <- t_test_df %>%
filter(Difference == comp & Condition == condition & Measure == col)
sign <- "?"
if (nrow(do_we_have_anything) == 1) {
sign <- do_we_have_anything$Significance
}
sign_vec <- c(sign_vec, sign)
}
size_vec <- NULL
for (sign in sign_vec) {
if (sign == "?") {
size <- 5
} else {
size <- 8
}
size_vec <- c(size_vec, size)
}
labelling_df <- special_purpose_df %>%
filter(Condition == condition)
g1 <- ggplotGrob(labelling_df %>%
ungroup(Measurement) %>%
mutate(Measurement = factor(Measurement, levels = col_vec)) %>%
group_by(Measurement) %>%
filter(second == "ln( PP )") %>%
ggplot(aes_string(x = "Measurement", y = comp)) +
geom_boxplot() +
geom_hline(yintercept=0, linetype="dashed", color = "red", alpha = 0.6, size=1) +
theme_bw() +
ggtitle(figure_out_special_title(comp, condition)) +
ylab(expression(Delta~"ln("~bar("PP")~")")) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
stat_summary(fun.data = give.n, geom = "text") +
scale_x_discrete(labels=c(" ")) +
scale_y_continuous(expand = c(0.15, 0, 0.3, 0)) +
annotate("text", x=1, y=Inf, label= sign_vec[1], vjust = 1.2, size = size_vec[1]))
g2 <- ggplotGrob(labelling_df %>%
ungroup(Measurement) %>%
mutate(Measurement = factor(Measurement, levels = col_vec)) %>%
group_by(Measurement) %>%
filter(second == "ln( EDA )") %>%
ggplot(aes_string(x = "Measurement", y = comp)) +
geom_boxplot() +
geom_hline(yintercept=0, linetype="dashed", color = "red", alpha = 0.6, size=1) +
theme_bw() +
ggtitle(" ") +
ylab(expression(Delta~"ln"~bar("( . )"))) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
stat_summary(fun.data = give.n, geom = "text") +
scale_x_discrete(labels=c("D.EDA")) +
scale_y_continuous(expand = c(0.15, 0, 0.3, 0)) +
annotate("text", x=1, y=Inf, label= sign_vec[4], vjust = 1.2, size = size_vec[4]) +
annotate("text", x=2, y=Inf, label= sign_vec[5], vjust = 1.2, size = size_vec[5]))
g3 <- ggplotGrob(labelling_df %>%
ungroup(Measurement) %>%
mutate(Measurement = factor(Measurement, levels = col_vec)) %>%
group_by(Measurement) %>%
filter(second == "") %>%
ggplot(aes_string(x = "Measurement", y = comp)) +
geom_boxplot() +
geom_hline(yintercept=0, linetype="dashed", color = "red", alpha = 0.6, size=1) +
theme_bw() +
ggtitle(" ") +
ylab(expression(Delta~bar(" . "))) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.15, 0, 0.3, 0)) +
annotate("text", x=1, y=Inf, label= sign_vec[2], vjust = 1.2, size = size_vec[2]) +
annotate("text", x=2, y=Inf, label= sign_vec[3], vjust = 1.2, size = size_vec[3]) +
annotate("text", x=3, y=Inf, label= sign_vec[6], vjust = 1.2, size = size_vec[6]) +
annotate("text", x=4, y=Inf, label= sign_vec[7], vjust = 1.2, size = size_vec[7]))
g <- ggarrange(g1, g2, g3, ncol = 3, nrow = 1)
dt_lst[[i]] <- g
i <- i + 1
}
return(ggarrange(dt_lst[[1]], dt_lst[[2]], dt_lst[[3]], dt_lst[[4]], ncol = 1, nrow = 4))
}
# Wow, we made it though plot 1s! Great job! Go take a break.
# ...
# Are you back? Ready to work now, slacker? Good!
# Let's go on to the next round of plots!
plot2 <- function(testing_df, test_type, col, cond) {
# This is pretty important, per Professor Pavlidis' request, we note that no matter what, these columns
# need to be logged and applied as a t-test. So we do just that by setting their test-type to "transformed t-test."
if (col == "PP" || col == "D.EDA" || col == "N.EDA") {
test_type <- "tt"
}
# Simple mode: activated.
label <- figure_out_labels(col)
title <- figure_out_title(col, cond, test_type)
# We set up the intended order for displaying the differences.
comparison_levels <- c("WB.RB", "SC.RB", "SC.WB", "DT.RB", "DT.WB", "DT.SC",
"P.RB", "P.WB", "P.SC", "P.DT")
# We like '*' characters in our graphs, so we do this! Yay!
# EDIT: Note that `t_test_df` is the very last table you see generated in the PDF.
do_we_have_anything <- t_test_df %>%
filter(Measure == col & Condition == cond)
# Wow, what a fancy line of code, eh! Replacing '.' with '-' has never been easier this way!
labels_vec <- gsub(".", "-", comparison_levels, fixed = TRUE)
# If we have symbols for each session difference above, then we can get them all ready!
if (nrow(do_we_have_anything) == length(comparison_levels)) {
sign <- do_we_have_anything$Significance
}
# Gross! We have to use `gather` to make the dataframe nice, then factor the Comparison values into our intended order.
# This part is gross - just figure out how it works.
middle_df <- tibble()
middle_df <- testing_df %>%
gather(Comparison, Value, -Subject, -Condition, -Measurement,
-RestingBaseline, -BaselineWriting, -StressCondition, -DualTask, - Presentation) %>%
mutate(Comparison = factor(Comparison, levels = comparison_levels))
# Fun plotting time now! Everything here SHOULD be pretty straight-forward, especially after reading the code for `plot1`...
print(ggplot(middle_df, aes(x = Comparison, y = Value)) +
geom_boxplot() +
labs(title = title,
y = label) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size=11, angle = 45, hjust = 1)) +
geom_hline(yintercept=0, linetype="dashed", color = "red", alpha = 0.6, size=1) +
scale_x_discrete(labels=labels_vec) +
stat_summary(fun.y = mean, color = "darkred", geom = "point", shape = 3, size = 2, show_guide = FALSE) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.15, 0, 0.15, 0)) +
annotate("text", x=1, y=Inf, label= sign[1], vjust = 1.2, size = 10) +
annotate("text", x=2, y=Inf, label= sign[2], vjust = 1.2, size = 10) +
annotate("text", x=3, y=Inf, label= sign[3], vjust = 1.2, size = 10) +
annotate("text", x=4, y=Inf, label= sign[4], vjust = 1.2, size = 10) +
annotate("text", x=5, y=Inf, label= sign[5], vjust = 1.2, size = 10) +
annotate("text", x=6, y=Inf, label= sign[6], vjust = 1.2, size = 10) +
annotate("text", x=7, y=Inf, label= sign[7], vjust = 1.2, size = 10) +
annotate("text", x=8, y=Inf, label= sign[8], vjust = 1.2, size = 10) +
annotate("text", x=9, y=Inf, label= sign[9], vjust = 1.2, size = 10) +
annotate("text", x=10, y=Inf, label= sign[10], vjust = 1.2, size = 10)
)
}
# We finally made it! Now we can finally compute all the tests.
# Wasn't that exhausting to go through just to get here?
# Yeah, I know.
# I had to write it and then re-write it to get it here.
# I hope you can feel my pain.
test_time <- function(condition, col, full = TRUE) {
# Set a global variable to determine which test we do:
# 't' = t-test
# 'tt' = transformed t-test
# 'w' = Wilcoxon test
test_type <- "t"
end_str <- NA
# Firstly, get rid of missing values. Duh!
temp <- result_df[!is.na(result_df[[col]]), ]
# Ensure that n >= 7 for these conditions, or else we can run any tests on it since there aren't enough subjects.
# Note that I compute n in a really fancy, dynamic way that makes sense once you read it.
# Why do I do this? Because there is one row for each session, so that means if T0XX has a `PP` value, there is a row for
# RestingBaseline, WritingBaseline, ..., and Presentation, making it 5 rows for a single subject. Because we want n >= 7,
# we really want to test that there n is greater than the number of rows for that subject, meaning if each subject has 5 rows,
# one for each session, n has to be >= 35.
# Aren't I smart!
n <- length(levels(factor(temp$Session))) * 7
# Now we can filter by condition and ensuring that we have enough subjects for that condition based on the `n` computed right above.
temp <- temp %>%
group_by(Condition) %>%
filter(Condition == condition && n() >= n)
# I guess we didn't have enough subjects for this condition!
if (nrow(temp) == 0) {
# THIS IS IMPORTANT!
# Because this function gets called twice (you will see why later), we don't want to print out the same thing twice!
# So, I very GENIUSLY use a variable to dictate when to print something to the console and when to print it to the screen. Ha ha!
if (!full) {
message(paste0(condition, " has LESS than 7 subjects for ", col, ". Cannot continue with test. "))
flush.console()
} else {
cat(paste0(condition, " has LESS than 7 subjects for ", col, ". Cannot continue with test. \n-----\n"))
}
} else { # This means that we have 7 or more subjects, so we can actually do a test now! :)
# Ensure that we always log for PP and EDAs.
# Of course to do that, we have to make sure all values are above 0 and shift up by the minimum value (plus a bit more) if not!
# We make this a permanent change!
# EDIT: Professor wanted these measurements logged no matter what - regardless of whether it is inherently Normal or not.
if (col == "PP" || col == "D.EDA" || col == "N.EDA") { # we don't want to do it for these columns AGAIN, now do we?
shift_val <- 0
if (min(temp[[col]]) <= 0) {
shift_val <- min(temp[[col]]) + 0.001
}
temp[[col]] <- log(temp[[col]]) + shift_val
}
# We now perform the Shapiro-Wilks test to test if our data is naturally Normal!
# EDIT: Here we make a variable `temp_col` that points to the actual dataframe's column (temp[[col]]). We do this so that
# `temp_col` acts as a practice dummy in a way - we first log `temp_col` to see if we like the results. If we do, then
# we know it is safe and can permanently make the change for `temp[[col]]`. If we log it and hate it, `temp_col` is great
# because we never made that change permanently, so we can just continue on with the calculations with the unmodified column.
temp_col <- temp[[col]]
shapiro_test_results <- shapiro.test(temp_col)
# This line below will make much more sense in just a bit...
temp_for_plotting <- temp
if (shapiro_test_results$p.value < 0.05) {
if (!full) {
message(paste0(col, " is NOT normal (p = ", round(shapiro_test_results$p.value, 4), "). Adjusting with `log` now. "))
flush.console()
}
# Dang, it wasn't Normal, so try correcting with a shift and then ln.
if (col != "PP" && col != "D.EDA" && col != "N.EDA") {
shift_val <- 0
if (min(temp_col) <= 0) {
shift_val <- min(temp_col) + 0.001
if (!full) {
message(paste0(col, " values less than 0, shifted each value up by ", shift_val, ". "))
flush.console()
}
}
temp_col <- log(temp_col) + shift_val
}
shapiro_test_results <- shapiro.test(temp_col)
# We preserve the current status of our dataframe by saving it for plotting later without any log adjustments to it.
# Why? Because I was told to make it like this.
temp_for_plotting <- temp
# Okay, the moment we have all been waiting for: do we have Normal data?
if (shapiro_test_results$p.value < 0.05) {
if (full) {
end_str <- paste0("In the following tests, we applied ln(", col, "). \n\n")
} else {
message(paste0("Transformed data for ", col, " is still NOT normal (p = ", round(shapiro_test_results$p.value, 4),
"). Continuing with Wilcoxn test. "))
flush.console()
}
# Dang, STILL not normal, so correct with ln anyway (per Professor Pavlidis' request), but this time permanently.
test_type <- "w"
if (col != "PP" && col != "D.EDA" && col != "N.EDA") {
shift_val <- 0
if (min(temp[[col]]) <= 0) {
shift_val <- min(temp[[col]]) + 0.001
}
temp[[col]] <- log(temp[[col]]) + shift_val
}
} else {
if (!full) {
message(paste0("Transformed data for ", col, " is now normal (p = ", round(shapiro_test_results$p.value, 4),
"). Continuing with t-test. "))
flush.console()
}
# We are doing a transformed t-test, so we still have to permanently log our data for this column!
test_type <- "tt"
if (col != "PP" && col != "D.EDA" && col != "N.EDA") {
shift_val <- 0
if (min(temp[[col]]) <= 0) {
shift_val <- min(temp[[col]]) + 0.001
}
temp[[col]] <- log(temp[[col]]) + shift_val
}
}
} else {
# Wow, it was actually Normal first try? Neat!
if (!full) {
message(paste0(col, " is normal (p = ", round(shapiro_test_results$p.value, 4), "). Continuing with t-test. "))
flush.console()
}
test_type <- "t"
}
conditions <- levels(factor(temp$Condition))
for (cond in conditions) {
# One condition at a time, please.
temp_cond <- temp %>%
filter(Condition == cond)
# This is it - the most complicated code segment of the whole script. This is just gross.
# I won't even try explaining it here. Just trust that it works or figure it out on your own through
# several rounds of printing, experimenting, and messing up before finally getting it.
testing_df <- temp_cond %>%
gather(Measurement, Value, -Subject, -Condition, -Session) %>%
spread(Session, Value) %>%
filter(Measurement == col) %>%
filter(!is.na(col)) %>%
mutate(WB.RB = BaselineWriting - RestingBaseline,
SC.RB = StressCondition - RestingBaseline,
SC.WB = StressCondition - BaselineWriting,
DT.RB = DualTask - RestingBaseline,
DT.WB = DualTask - BaselineWriting,
DT.SC = DualTask - StressCondition,
P.RB = Presentation - RestingBaseline,
P.WB = Presentation - BaselineWriting,
P.SC = Presentation - StressCondition,
P.DT = Presentation - DualTask)
# We set up a tibble, `t_df`, to put our test results into.
t_df <- tibble()
# If the column is one listed below, per Professor Pavlidis, we just continue with a t-test anyway since the
# format of the data inherently doesn't work with a Wilcoxon. We just force it as a t-test because we have all
# the power here and can do whatever we want.
if (col == "PP" || col == "D.EDA" || col == "N.EDA") {
if (!full) {
message(paste0(col, " is close enough to normal. Continuing with t-test. "))
flush.console()
}
test_type = "tt"
}
# This code is for a t-test or a transformed t-test (basically the same thing, but with a log transformation).
if (test_type == "t" | test_type == "tt") {
name <- "t-test"
if (test_type == "tt") {
name <- "Transformed t-test"
}
# We document the name of the test.
test <- "Writing Baseline - Resting Baseline"
# We calculate the p-value for this session difference.
p <- t.test(testing_df[["WB.RB"]])$p.value
# We find the sign of our results (this is the '*' thing we put in our two plots way up above).
sign <- interpret_results(p)
# Then we add EVERYTHING to that tibble we made earlier to hold it for us (wow, how nice!).
t_df <- rbind(t_df, tibble(Difference = "WB.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(WB.RB))), Significance = sign))
# And now just rinse and repeat a million times.
test <- "Stress Condition - Resting Baseline"
p <- t.test(testing_df[["SC.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "SC.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(SC.RB))), Significance = sign))
test <- "StressCondition - Writing Baseline"
p <- t.test(testing_df[["SC.WB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "SC.WB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(SC.WB))), Significance = sign))
test <- "Dual Task - Resting Baseline"
p <- t.test(testing_df[["DT.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "DT.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(DT.RB))), Significance = sign))
test <- "Dual Task - Writing Baseline"
p <- t.test(testing_df[["DT.WB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "DT.WB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(DT.WB))), Significance = sign))
test <- "Dual Task - Stress Condition"
p <- t.test(testing_df[["DT.SC"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "DT.SC", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(DT.SC))), Significance = sign))
test <- "Presentation - Resting Baseline"
p <- t.test(testing_df[["P.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.RB))), Significance = sign))
test <- "Presentation - Writing Baseline"
p <- t.test(testing_df[["P.WB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.WB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.WB))), Significance = sign))
test <- "Presentation - Stress Condition"
p <- t.test(testing_df[["P.SC"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.SC", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.SC))), Significance = sign))
test <- "Presentation - Dual Task"
p <- t.test(testing_df[["P.DT"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.DT", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.DT))), Significance = sign))
# Not a t-test or a transformed t-test? Don't worry - we got you covered with our friend, Wilcoxon!
} else if (test_type == "w" ) {
name <- "Wilcoxon"
test <- "Writing Baseline - Resting Baseline"
p <- wilcox.test(testing_df[["WB.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "WB.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(WB.RB))), Significance = sign))
test <- "Stress Condition - Resting Baseline"
p <- wilcox.test(testing_df[["SC.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "SC.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(SC.RB))), Significance = sign))
test <- "StressCondition - Writing Baseline"
p <- wilcox.test(testing_df[["SC.WB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "SC.WB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(SC.WB))), Significance = sign))
test <- "Dual Task - Resting Baseline"
p <- wilcox.test(testing_df[["DT.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "DT.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(DT.RB))), Significance = sign))
test <- "Dual Task - Writing Baseline"
p <- wilcox.test(testing_df[["DT.WB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "DT.WB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(DT.WB))), Significance = sign))
test <- "Dual Task - Stress Condition"
p <- wilcox.test(testing_df[["DT.SC"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "DT.SC", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(DT.SC))), Significance = sign))
test <- "Presentation - Resting Baseline"
p <- wilcox.test(testing_df[["P.RB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.RB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.RB))), Significance = sign))
test <- "Presentation - Writing Baseline"
p <- wilcox.test(testing_df[["P.WB"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.WB", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.WB))), Significance = sign))
test <- "Presentation - Stress Condition"
p <- wilcox.test(testing_df[["P.SC"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.SC", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.SC))), Significance = sign))
test <- "Presentation - Dual Task"
p <- wilcox.test(testing_df[["P.DT"]])$p.value
sign <- interpret_results(p)
t_df <- rbind(t_df, tibble(Difference = "P.DT", Measure = col, Condition = cond, p = p,
Name = test, Test = name, n = nrow(testing_df %>% filter(!is.na(P.DT))), Significance = sign))
}
# We create a list with this tibble we just made, the test test, column, condition, and special end string to print out if we need to
# and then we return that, which ends up going towards the code to create the plots!
# Pretty genius and excessive, no?
if (full) {
if (nrow(final_testing_df) > 0) {
final_testing_df <<- rbind(final_testing_df, testing_df)
} else {
final_testing_df <<- testing_df
}
lst <- list("testing_df" = testing_df, "test_type" = test_type, "col" = col, "cond" = cond, "end_str" = end_str)
# We also append this tibble to our big ol' global tibble from the beginning.
if (nrow(session_compare_df) > 0) {
session_compare_df <<- rbind(session_compare_df, testing_df)
} else {
session_compare_df <<- testing_df
}
return(lst)
}
# We also append this smaller tibble to our smaller ol' global tibble from the beginning. This is the one that gets
# printed out at the very end.
t_test_df <<- rbind(t_test_df, t_df)
return(NA)
}
}
return(NA)
}
# Whew! We made it! Now let's go on to the easier functions that are WAY more self-explanatory!
interpret_results <- function(p_value) {
if (p_value > 0.05) {
return(" ")
} else if (p_value <= 0.001) {
return("***")
} else if (p_value <= 0.01) {
return("**")
} else if (p_value <= 0.05) {
return("*")
}
}
# Pretty much the same thing as above but much more verbose and talkative.
interpret_results_after <- function(cond, col) {
comparison_levels <- c("WB.RB", "SC.RB", "SC.WB", "DT.RB", "DT.WB", "DT.SC",
"P.RB", "P.WB", "P.SC", "P.DT")
for (test in comparison_levels) {
do_we_have_anything <- t_test_df %>%
filter(Measure == col & Condition == cond & Difference == test)
if (nrow(do_we_have_anything) == 1) {
p_value <- do_we_have_anything$p
test <- do_we_have_anything$Name
name <- do_we_have_anything$Test
if (p_value > 0.05) {
cat(paste0(test, "\n", name, " p = ", round(p_value, 4), " > 0.05\n\n"))
} else if (p_value <= 0.001) {
cat(paste0(test, "\n", name, " p = ", round(p_value, 4), " < 0.001  ***\n\n"))
} else if (p_value <= 0.01) {
cat(paste0(test, "\n", name, " p = ", round(p_value, 4), " < 0.01  **\n\n"))
} else if (p_value <= 0.05) {
cat(paste0(test, "\n", name, " p = ", round(p_value, 4), " < 0.05  *\n\n"))
}
}
}
}
# You should be used to this by now...
figure_out_labels <- function(col_name) {
if (isMatch(col_name, 'PP')) {
return(expression(Delta~paste('Perinasal Perspiration [',''^'o','C',''^2,']')))
} else if (isMatch(col_name, 'HR')) {
return(expression(Delta~'Heart Rate [BPM]'))
} else if (isMatch(col_name, 'BR')) {
return(expression(Delta~'Breathing Rate [BPM]'))
} else if (isMatch(col_name, 'EDA')) {
return(expression(Delta~'EDA ['~mu~'S]'))
}
return('Unknown axis.')
}
# ... and this...
figure_out_special_title <- function(difference, condition) {
return(paste0(condition, ": ", gsub(".", " - ", difference, fixed = TRUE)))
}
# ... and even this.
figure_out_title <- function(col_name, condition, test_type) {
if (test_type != "tt") {
return(paste0(condition, ": ", col_name))
}
return(paste0(condition, ": ln(", col_name, ") "))
}
source('T:/Google Drive/University of Houston/CS - UH/@Research - CPL/@Projects/NsfStressDataCuration/nsf-stress-study-scripts/GenerateTestingDF.R', echo=TRUE)
