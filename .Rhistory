summarize(meanRB = mean(PP, na.rm = TRUE))
essay_df <- result_df %>%
filter(Task == "Essay") %>%
group_by(Subject, Condition) %>%
summarize(Essay = mean(PP, na.rm = TRUE))
email_df <- result_df %>%
filter(Task == "Email") %>%
group_by(Subject, Condition) %>%
summarize(Email = mean(PP, na.rm = TRUE))
total_df <- merge(rb_mean_df, essay_df, by = c("Subject", "Condition"))
total_df <- merge(total_df, email_df, by = c("Subject", "Condition"))
total_df <- total_df %>%
na.omit() %>%
mutate(Essay = Essay - meanRB) %>%
mutate(Email = Email - meanRB)
result_sig <- interpret_results(t.test(total_df$Essay, total_df$Email, data = total_df, paired = TRUE)$p.value)
result <- interpret_results_after(t.test(total_df$Essay, total_df$Email, data = total_df, paired = TRUE)$p.value, "For all groups,")
grouped_sign_vec <- NULL
result_grouped_vec <- NULL
cond_df <- total_df %>%
filter(Condition %in% c("BH", "BL"))
grouped_sign_vec[1] <- interpret_results(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value)
result_grouped_vec[1] <- interpret_results_after(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value, "For Batch,")
cond_df <- total_df %>%
filter(Condition %in% c("IH", "IL"))
grouped_sign_vec[2] <- interpret_results(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value)
result_grouped_vec[2] <- interpret_results_after(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value, "For Intermittent,")
total_df <- total_df %>%
gather(Task, Value, -Subject, -Condition, -meanRB)
colnames(total_df)[which(names(total_df) == "Value")] <- "PP"
colnames(total_df)[which(names(total_df) == "Condition")] <- "Group"
colnames(total_df)[which(names(total_df) == "Task")] <- "DualTask"
total_df <- total_df %>%
mutate(Group = factor(Group)) %>%
mutate(Group = factor(Group, levels = c("BL", "IL", "BH", "IH"))) %>%
mutate(DualTask = factor(DualTask)) %>%
mutate(DualTask = factor(DualTask, levels = c("Email", "Essay")))
levels(total_df$Group) <- c("Batch", "Intermittent", "Batch", "Intermittent")
levels(total_df$DualTask) <- c("Emails", "Report")
# CREATING LINEAR MODELS
fit_dt <- lme(PP ~ 1 + Group + DualTask, data = total_df, random = ~1|Subject, na.action = na.omit)
# SUMMARIZING LINEAR MODELS
print(summary(fit_dt))
print(
total_df %>%
ggplot(aes(x = Group, y = PP, fill = DualTask)) +
geom_boxplot() +
geom_hline(yintercept=0, linetype="dashed", color = "red", alpha = 0.6, size = 1) +
theme_bw() +
ggtitle(" ") +
ylab(expression(Delta~paste('ln(PP) [',''^'o','C',''^2,']'))) +
theme(axis.title.x=element_blank(),
legend.position="bottom",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
legend.text=element_text(size=14),
legend.title=element_text(size=14)) +
stat_summary(fun.data = give.n, geom = "text", color = "black") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0)) +
annotate("text", x=1, y=Inf, label= grouped_sign_vec[1], vjust = 1.2, size = 8) +
annotate("text", x=2, y=Inf, label= grouped_sign_vec[2], vjust = 1.2, size = 8) +
scale_fill_manual(labels = c("Emails", "Report"), values = c("#E2D200", "#DD8D28"))
)
cat(result_grouped_vec[1])
cat(result_grouped_vec[2])
# READING IN CSV FILES
result_df <- testing_df
essay_score_df <- read_csv("@Datasets/essay_score_master_file.csv", col_types = cols())
names(essay_score_df) <- c("Subject", "Score", "GrammaticalErrors",	"UsageErrors", "MechanicErrors",
"StyleErrors", "WordChoiceLevel", "ConventionsLevel", "FluencyOrganizationLevel")
essay_score_df$Session <- str_sub(essay_score_df$Subject, start = -2)
essay_score_df$Subject <- str_sub(essay_score_df$Subject, end = 4)
essay_score_df$Warning <- stri_extract_first_regex(essay_score_df$Score, "[a-zA-Z]*")
essay_score_df$Score <- as.numeric(stri_extract_first_regex(essay_score_df$Score, "[0-9]+"))
essay_score_df <- essay_score_df %>%
mutate(TotalErrors = GrammaticalErrors + UsageErrors + MechanicErrors + StyleErrors) %>%
mutate(Session = factor(Session, levels = c("WB", "DT")))
nlp_df <- read_csv("@Datasets/essay_nlp_results.csv", col_types = cols())
nlp_df <- nlp_df[ , !names(nlp_df) %in% "Condition"]
colnames(nlp_df)[which(names(nlp_df) == "Report")] <- "Session"
# MERGING CSV FILES
full_df <- merge(essay_score_df, result_df, by = "Subject")
# full_nlp_df <- merge(full_df, nlp_df, by = c("Subject", "Session"))
# full_nlp_df <- full_nlp_df %>%
#   mutate(NormalizedErrorWC = TotalErrors / WordCount) %>%
#   mutate(NormalizedErrorSC = TotalErrors / SentenceCount)
full_df <- full_df %>%
mutate(Group = factor(Group, levels = c("BN", "IN", "BF", "IF")))
levels(full_df$Group) <- c("Intermittent", "Intermittent", "Batch", "Batch")
levels(full_df$Group) <- c("Batch", "Intermittent")
colnames(full_df)[which(names(full_df) == "Session")] <- "Activity"
# CREATING LINEAR MODELS
fit_writing_quality <- lme(Score ~ 1 + Group + Activity, data = full_df, random = ~1|Subject, na.action = na.omit)
# SUMMARIZING LINEAR MODEL
print(summary(fit_writing_quality))
g1 <- full_df %>%
ggplot(aes(x = Group, y = Score, fill = Activity)) +
geom_boxplot() +
theme_bw() +
ggtitle(" ") +
ylab("ETS Score") +
theme(axis.title.x=element_blank(),
axis.text = element_text(size=14),
axis.title = element_text(size=16),
legend.position = "bottom",
legend.text=element_text(size=14),
legend.title=element_text(size=14)) +
scale_y_continuous(breaks = pretty_breaks(n = 7)) +
scale_fill_manual(labels = c("ST", "DT"), values = c("#00FFFF", "#007FFF"))
print(g1)
full_df_n_only <- full_df %>%
group_by(Activity, Group) %>%
summarize(n = n())
levels(full_df_n_only$Activity) <- c("ST", "DT")
kable(full_df_n_only, format = "latex", longtable = TRUE) %>%
kable_styling(latex_options = c("hold_position", "striped", "repeat_header"))
# MERGING CSV FILES
diff_df <- testing_df[ , c(1:3, 9:18)]
names <- names(diff_df)[!(names(diff_df) %in% c("WB.RB", "SC.RB", "SC.WB", "DT.RB", "DT.WB", "DT.SC", "P.RB", "P.WB", "P.SC", "P.DT"))]
diff_df <- diff_df %>%
gather(Session, HR, -names) %>%
mutate(Session = factor(Session, levels = c("WB.RB", "SC.RB", "SC.WB", "DT.RB", "DT.WB", "DT.SC", "P.RB", "P.WB", "P.SC", "P.DT"))) %>%
filter(Session %in% c("WB.RB", "SC.RB", "DT.RB", "P.RB")) %>%
filter(Measurement == "HR")
levels(diff_df$Session) <- c("ST", "B", "SC.WB", "DT", "DT.WB", "DT.SC", "P", "P.WB", "P.SC", "P.DT")
# diff_df <- merge(diff_df, age_df, by = "Subject")
levels(diff_df$Group) <- c("Batch", "Intermittent", "Batch", "Intermittent")
colnames(diff_df)[which(names(diff_df) == "Session")] <- "Activity"
# CREATING LINEAR MODELS
fit3_diff <- lme(HR ~ 1 + Group + Activity, data = diff_df, random = ~1|Subject, na.action = na.omit)
# SUMMARIZING LINEAR MODELS
print(summary(fit3_diff))
# Okay, let's loop over everything and get this over with.
diff1 <- "WB.RB"
diff2 <- "DT.RB"
diff3 <- "P.RB"
measure <- "HR"
# Let's make sure we adjust the measure label for PP to indicate that we indeed log it.
measure_label <- measure
if (measure == "PP") {
measure_label <- paste0("ln(", measure, ")")
}
anova_df <- tibble()
anova_df <- testing_df[c("Subject", "Group", "Measurement", diff1, diff2, diff3)] %>%
filter(Measurement == measure) %>%
na.omit()
anova_df <- anova_df %>%
gather(Measure, Difference, -Subject, -Group, -Measurement) %>%
mutate(Measure = factor(Measure, levels = c(diff1, diff2, diff3)))
anova_df <- anova_df %>%
mutate(Group = factor(Group, levels = c("BN", "IN", "BF", "IF")))
# We specify the order for our conditions.
levels(anova_df$Group) <- c("Batch", "Intermittent", "Batch", "Intermittent")
levels(anova_df$Group) <- c("Batch", "Intermittent")
print(anova_df %>%
ggplot(aes(x = Group, y = Difference, fill = Measure), color = "black") +
geom_boxplot(color = "#000000") +
theme_bw() +
geom_hline(yintercept=0, linetype="dashed", color = "black", alpha = 0.6, size=1) +
theme(axis.title.x=element_blank(),
legend.position="bottom",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
legend.text=element_text(size=14),
legend.title=element_text(size=14)) +
labs(#title = paste0(gsub(".", " - ", diff, fixed = TRUE), " for ", measure_label),
y = expression(Delta~"ln(PP)")) +
scale_fill_manual(labels = c("ST", "DT", "P"), values = c("#04BA39", "#FFAE42", "#F8766D"))
)
cat("\n  \n  \n")
print(anova_df %>%
ggplot(aes(x = Measure, y = Difference, fill = Group)) +
geom_boxplot(color = "#000000") +
theme_bw() +
geom_hline(yintercept=0, linetype="dashed", color = "black", alpha = 0.6, size=1) +
theme(axis.title.x=element_blank(),
legend.position="bottom",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
legend.text=element_text(size=14),
legend.title=element_text(size=14)) +
labs(#title = paste0(gsub(".", " - ", diff, fixed = TRUE), " for ", measure_label),
y = expression(Delta~"ln(PP)")) +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0)) +
scale_x_discrete(labels = c("SingleTask", "DualTask", "Presentation"))
)
full_df <- full_no_changing_df
# Just taking some columns from the global tibble that we need and getting rid of the rest of them.
result_df <- full_df[ , c("Subject", "Condition", "Session", "CovertedTime", "TimeElapsed", "HR", "Task")]
rb_mean_df <- result_df %>%
filter(Session == "RestingBaseline") %>%
group_by(Subject, Condition) %>%
summarize(meanRB = mean(HR, na.rm = TRUE))
essay_df <- result_df %>%
filter(Task == "Essay") %>%
group_by(Subject, Condition) %>%
summarize(Essay = mean(HR, na.rm = TRUE))
email_df <- result_df %>%
filter(Task == "Email") %>%
group_by(Subject, Condition) %>%
summarize(Email = mean(HR, na.rm = TRUE))
total_df <- merge(rb_mean_df, essay_df, by = c("Subject", "Condition"))
total_df <- merge(total_df, email_df, by = c("Subject", "Condition"))
total_df <- total_df %>%
na.omit() %>%
mutate(Essay = Essay - meanRB) %>%
mutate(Email = Email - meanRB)
result_sig <- interpret_results(t.test(total_df$Essay, total_df$Email, data = total_df, paired = TRUE)$p.value)
result <- interpret_results_after(t.test(total_df$Essay, total_df$Email, data = total_df, paired = TRUE)$p.value, "For all groups,")
grouped_sign_vec <- NULL
result_grouped_vec <- NULL
cond_df <- total_df %>%
filter(Condition %in% c("BH", "BL"))
grouped_sign_vec[1] <- interpret_results(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value)
result_grouped_vec[1] <- interpret_results_after(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value, "For Batch,")
cond_df <- total_df %>%
filter(Condition %in% c("IH", "IL"))
grouped_sign_vec[2] <- interpret_results(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value)
result_grouped_vec[2] <- interpret_results_after(t.test(cond_df$Essay, cond_df$Email, data = cond_df, paired = TRUE)$p.value, "For Intermittent,")
total_df <- total_df %>%
gather(Task, Value, -Subject, -Condition, -meanRB)
colnames(total_df)[which(names(total_df) == "Value")] <- "HR"
colnames(total_df)[which(names(total_df) == "Condition")] <- "Group"
colnames(total_df)[which(names(total_df) == "Task")] <- "DualTask"
total_df <- total_df %>%
mutate(Group = factor(Group)) %>%
mutate(Group = factor(Group, levels = c("BL", "IL", "BH", "IH"))) %>%
mutate(DualTask = factor(DualTask)) %>%
mutate(DualTask = factor(DualTask, levels = c("Email", "Essay")))
levels(total_df$Group) <- c("Batch", "Intermittent", "Batch", "Intermittent")
levels(total_df$DualTask) <- c("Emails", "Report")
# CREATING LINEAR MODELS
fit_dt <- lme(HR ~ 1 + Group + DualTask, data = total_df, random = ~1|Subject, na.action = na.omit)
# SUMMARIZING LINEAR MODELS
print(summary(fit_dt))
print(
total_df %>%
ggplot(aes(x = Group, y = HR, fill = DualTask)) +
geom_boxplot() +
geom_hline(yintercept=0, linetype="dashed", color = "red", alpha = 0.6, size = 1) +
theme_bw() +
ggtitle(" ") +
ylab(expression(Delta~paste('ln(HR) [',''^'o','C',''^2,']'))) +
theme(axis.title.x=element_blank(),
legend.position="bottom",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
legend.text=element_text(size=14),
legend.title=element_text(size=14)) +
stat_summary(fun.data = give.n, geom = "text", color = "black") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0)) +
annotate("text", x=1, y=Inf, label= grouped_sign_vec[1], vjust = 1.2, size = 8) +
annotate("text", x=2, y=Inf, label= grouped_sign_vec[2], vjust = 1.2, size = 8) +
scale_fill_manual(labels = c("Emails", "Report"), values = c("#E2D200", "#DD8D28"))
)
cat(result_grouped_vec[1])
cat(result_grouped_vec[2])
# SUMMARIZING LINEAR MODEL
print(summary(fit_writing_quality))
print(g1)
kable(full_df_n_only, format = "latex", longtable = TRUE) %>%
kable_styling(latex_options = c("hold_position", "striped", "repeat_header"))
essay_score_df <- read_csv("@Datasets/essay_score_master_file.csv", col_types = cols())
names(essay_score_df) <- c("Subject", "Score", "GrammaticalErrors",	"UsageErrors", "MechanicErrors",
"StyleErrors", "WordChoiceLevel", "ConventionsLevel", "FluencyOrganizationLevel")
essay_score_df$Session <- str_sub(essay_score_df$Subject, start = -2)
essay_score_df$Subject <- str_sub(essay_score_df$Subject, end = 4)
essay_score_df$Warning <- stri_extract_first_regex(essay_score_df$Score, "[a-zA-Z]*")
essay_score_df$Score <- as.numeric(stri_extract_first_regex(essay_score_df$Score, "[0-9]+"))
essay_score_df <- essay_score_df %>%
mutate(TotalErrors = GrammaticalErrors + UsageErrors + MechanicErrors + StyleErrors) %>%
mutate(Session = factor(Session, levels = c("WB", "DT")))
# nlp_df <- read_csv("~/Desktop/nsf-stress-study-files/essay_nlp_results.csv", col_types = cols())
# nlp_df <- nlp_df[ , !names(nlp_df) %in% "Condition"]
# colnames(nlp_df)[which(names(nlp_df) == "Essay")] <- "Session"
diff_df <- testing_df[ , c(1:3, 9:18)]
names <- names(diff_df)[!(names(diff_df) %in% c("WB.RB", "SC.RB", "SC.WB", "DT.RB", "DT.WB", "DT.SC", "P.RB", "P.WB", "P.SC", "P.DT"))]
diff_df <- diff_df %>%
gather(Session, PP, -names) %>%
mutate(Session = factor(Session, levels = c("WB.RB", "SC.RB", "SC.WB", "DT.RB", "DT.WB", "DT.SC", "P.RB", "P.WB", "P.SC", "P.DT"))) %>%
filter(Session %in% c("WB.RB", "DT.RB")) %>%
filter(Measurement == "PP")
levels(diff_df$Session) <- c("WB", "B", "SC.WB", "DT", "DT.WB", "DT.SC", "P", "P.WB", "P.SC", "P.DT")
# MERGING CSV FILES
full_df <- merge(essay_score_df, diff_df, by = c("Subject", "Session"))
# full_nlp_df <- merge(full_df, nlp_df, by = c("Subject", "Session"))
# full_nlp_df <- full_nlp_df %>%
#   mutate(NormalizedErrorWC = TotalErrors / WordCount) %>%
#   mutate(NormalizedErrorSC = TotalErrors / SentenceCount)
full_df <- full_df %>%
mutate(Group = factor(Group, levels = c("BN", "IN", "BF", "IF"))) %>%
mutate(Session = factor(Session, levels = c("WB", "DT")))
levels(full_df$Session) <- c("ST", "DT")
colnames(full_df)[which(names(full_df) == "Session")] <- "Activity"
colnames(full_df)[which(names(full_df) == "Score")] <- "ETSScore"
# levels(full_df$Group) <- c("Intermittent", "Intermittent", "Batch", "Batch")
# levels(full_df$Group) <- c("Batch", "Intermittent")
# CREATING LINEAR MODELS
eight_star_fit <- lme(PP ~ 1 + ETSScore + Group + Activity, data = full_df, random = ~1|Subject, na.action = na.omit)
# SUMMARIZING LINEAR MODELS
print(summary(eight_star_fit))
# levels(full_nlp_df$Group) <- c("Intermittent", "Intermittent", "Batch", "Batch")
# levels(full_nlp_df$Group) <- c("Batch", "Intermittent")
#
# # CREATING LINEAR MODELS
# eight_star_fit <- lme(PP ~ 1 + ETSScore + Group + Activity, data = full_df, random = ~1|Subject, na.action = na.omit)
#
# # SUMMARIZING LINEAR MODELS
# print(summary(eight_star_fit))
# kable(full_df[ , c("Subject", "PP", "ETSScore", "Group", "Activity")], format = "latex", longtable = TRUE) %>%
#   kable_styling(latex_options = c("hold_position", "striped", "repeat_header"))
library(tidyverse)
library(knitr)
library(tidyverse)
# install.packages("stringi")
library(stringi)
library(tidyr)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
# change the path to fit your needs
full_df <- read_csv("@Datasets/full_df.csv", col_types = cols())
# gender_df <- read_csv("~/Desktop/Stress_Project/Pre-SurveyExport.csv", col_types = cols())
gender_df <- read_csv("T:/Google Drive/University of Houston/CS - UH/@Research - CPL/@Projects/NsfStressDataCuration/survey-reports/Pre-SurveyExport.csv", col_types = cols())
gender_df <- gender_df[, c(22, 23, 24, 25, 27, 29, 30, 19)]
names(gender_df) <- c("Subject", "Age", "Gender", "Nationality", "NativeLanguage", "EducationLevel", "Occupation", "City")
gender_df[gender_df$Gender == 1, "Gender"] <- "Male"
gender_df
gender_df[gender_df$Gender == 1, "Gender"]
gender_df[gender_df$Gender == 1, "Gender"] <- "Male"
class(gender_df)
data.frame(gender_df)
gender_df <- data.frame(gender_df)
class(gender_df)
gender_df[gender_df$Gender == 1, "Gender"] <- "Male"
library(tidyverse)
library(grid)
library(gridExtra)
library(scales)
library(knitr)
library(ggpubr)
extrafont::loadfonts(quiet=TRUE)
# function for annotating boxplot with n
give.n <- function(x) {
return(c(y=-Inf, vjust = -1, label=length(x)))
}
print_output <- function(output, cex = 0.7) {
tmp <- capture.output(output)
plot.new()
text(0, 1, paste(tmp, collapse='\n'), adj = c(0,1), family = 'mono', cex = cex)
}
essay_df <- read_csv("@Datasets/essay_nlp_results.csv", col_types = cols())
essay_df <- essay_df %>%
mutate(Condition = factor(Condition, levels = c("IH", "IL", "BH", "BL")))
levels(essay_df$Condition) <- c("IF", "IN", "BF", "BN")
wb_essay_df <- essay_df %>%
filter(Report == "WB")
str(essay_df)
library(tidyverse)
library(grid)
library(gridExtra)
library(scales)
library(knitr)
library(ggpubr)
extrafont::loadfonts(quiet=TRUE)
# function for annotating boxplot with n
give.n <- function(x) {
return(c(y=-Inf, vjust = -1, label=length(x)))
}
print_output <- function(output, cex = 0.7) {
tmp <- capture.output(output)
plot.new()
text(0, 1, paste(tmp, collapse='\n'), adj = c(0,1), family = 'mono', cex = cex)
}
essay_df <- read_csv("@Datasets/essay_nlp_results.csv", col_types = cols())
essay_df <- essay_df %>%
mutate(Condition = factor(Condition, levels = c("IH", "IL", "BH", "BL")))
levels(essay_df$Condition) <- c("IF", "IN", "BF", "BN")
wb_essay_df <- essay_df %>%
filter(Essay == "WB")
wb_essay_df %>%
ggplot(aes(x = Condition, y = WordCount)) +
geom_boxplot() +
theme_bw() +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
labs(title = paste0("ST Word Count Across Groups"),
y = "Word Count") +
stat_summary(fun.y = mean, color = "darkred", geom = "point",
shape = 3, size = 2) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0))
cat("ANOVA:  \n  ")
anova_test <- aov(WordCount ~ Condition, data = wb_essay_df)
print_output(summary(anova_test))
cat("  \n---  \n\n  ")
print_output(TukeyHSD(anova_test))
cat("  \n  ")
wb_essay_df %>%
ggplot(aes(x = Condition, y = SentenceCount)) +
geom_boxplot() +
theme_bw() +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
labs(title = paste0("ST Sentence Count Across Groups"),
y = "Sentence Count") +
stat_summary(fun.y = mean, color = "darkred", geom = "point",
shape = 3, size = 2) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0))
cat("ANOVA:  \n  ")
anova_test <- aov(SentenceCount ~ Condition, data = wb_essay_df)
print_output(summary(anova_test))
cat("  \n---  \n\n  ")
print_output(TukeyHSD(anova_test))
cat("  \n  ")
dt_essay_df <- essay_df %>%
filter(Report == "DT")
library(tidyverse)
library(grid)
library(gridExtra)
library(scales)
library(knitr)
library(ggpubr)
extrafont::loadfonts(quiet=TRUE)
# function for annotating boxplot with n
give.n <- function(x) {
return(c(y=-Inf, vjust = -1, label=length(x)))
}
print_output <- function(output, cex = 0.7) {
tmp <- capture.output(output)
plot.new()
text(0, 1, paste(tmp, collapse='\n'), adj = c(0,1), family = 'mono', cex = cex)
}
essay_df <- read_csv("@Datasets/essay_nlp_results.csv", col_types = cols())
essay_df <- essay_df %>%
mutate(Condition = factor(Condition, levels = c("IH", "IL", "BH", "BL")))
levels(essay_df$Condition) <- c("IF", "IN", "BF", "BN")
wb_essay_df <- essay_df %>%
filter(Essay == "WB")
wb_essay_df %>%
ggplot(aes(x = Condition, y = WordCount)) +
geom_boxplot() +
theme_bw() +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
labs(title = paste0("ST Word Count Across Groups"),
y = "Word Count") +
stat_summary(fun.y = mean, color = "darkred", geom = "point",
shape = 3, size = 2) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0))
cat("ANOVA:  \n  ")
anova_test <- aov(WordCount ~ Condition, data = wb_essay_df)
print_output(summary(anova_test))
cat("  \n---  \n\n  ")
print_output(TukeyHSD(anova_test))
cat("  \n  ")
wb_essay_df %>%
ggplot(aes(x = Condition, y = SentenceCount)) +
geom_boxplot() +
theme_bw() +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
labs(title = paste0("ST Sentence Count Across Groups"),
y = "Sentence Count") +
stat_summary(fun.y = mean, color = "darkred", geom = "point",
shape = 3, size = 2) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0))
cat("ANOVA:  \n  ")
anova_test <- aov(SentenceCount ~ Condition, data = wb_essay_df)
print_output(summary(anova_test))
cat("  \n---  \n\n  ")
print_output(TukeyHSD(anova_test))
cat("  \n  ")
dt_essay_df <- essay_df %>%
filter(Essay == "DT")
dt_essay_df %>%
ggplot(aes(x = Condition, y = WordCount)) +
geom_boxplot() +
theme_bw() +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
labs(title = paste0("DT Word Count Across Groups"),
y = "Word Count") +
stat_summary(fun.y = mean, color = "darkred", geom = "point",
shape = 3, size = 2) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0))
cat("ANOVA:  \n  ")
anova_test <- aov(WordCount ~ Condition, data = dt_essay_df)
print_output(summary(anova_test))
cat("  \n---  \n\n  ")
print_output(TukeyHSD(anova_test))
cat("  \n  ")
dt_essay_df %>%
ggplot(aes(x = Condition, y = SentenceCount)) +
geom_boxplot() +
theme_bw() +
theme(axis.title.x=element_blank(), axis.text.x = element_text(size=10)) +
labs(title = paste0("DT Sentence Count Across Groups"),
y = "Sentence Count") +
stat_summary(fun.y = mean, color = "darkred", geom = "point",
shape = 3, size = 2) +
stat_summary(fun.data = give.n, geom = "text") +
scale_y_continuous(expand = c(0.1, 0, 0.1, 0))
cat("ANOVA:  \n  ")
anova_test <- aov(SentenceCount ~ Condition, data = dt_essay_df)
print_output(summary(anova_test))
cat("  \n---  \n\n  ")
print_output(TukeyHSD(anova_test))
cat("  \n  ")
source('T:/Google Drive/University of Houston/CS - UH/@Research - CPL/@Projects/NsfStressDataCuration/nsf-stress-study-scripts/SplitSessionAndMergeData.R', echo=TRUE)
source('T:/Google Drive/University of Houston/CS - UH/@Research - CPL/@Projects/NsfStressDataCuration/nsf-stress-study-scripts/NonProcessedSubjectNotes.R', echo=TRUE)
source('T:/Google Drive/University of Houston/CS - UH/@Research - CPL/@Projects/NsfStressDataCuration/nsf-stress-study-scripts/NonProcessedSubjectNotes.R', echo=TRUE)
